---
alwaysApply: true
---

# Project Memory & Dev Handbook

This file is the **source of truth** for project knowledge, conventions, and decisions used by the AI (Cursor rules).

> Storybook docs are **generated/mirrored** from this file into `storybook/learned-memories/*.mdx` using the provided sync script.

## How This Works
- **Authoritative memory for AI**: `.cursor/rules/learned-memories.mdc`
- **Mirrored handbook for developers**: `storybook/learned-memories/*.mdx`
- **Sync rule**: Every change here **must** be mirrored by running the sync script.

## Sync Commands (local)
```bash
# writes MDX docs into ./storybook/learned-memories
node scripts/sync-mdc-to-mdx.js .cursor/rules/learned-memories.mdc storybook/learned-memories
```

---

## User Preferences
- Keep answers concise by default; include code **diffs** unless full files are requested.
- Prefer **Next.js** for client + server work.
- Use **Tailwind v4** for styling; follow v4 utilities and patterns.
- When summarizing, lead with TL;DR, then details if needed.

## Technical Decisions
- **CSS Framework**: Tailwind v4. **Why**: JIT + design tokens, developer velocity. **Date**: 2025-08-31. **Impact**: Avoid v3-only plugins.
- **Design Docs**: Treat this handbook as Storybook-like docs; mirror via MDX. **Date**: 2025-08-31.
- **Data Viz**: Use Recharts for React charts; follow accessibility notes. **Date**: 2025-08-31.

## Project Conventions
- **Commits**: Conventional Commits (`feat:`, `fix:`, `chore:`). Scope = package/folder.
- **Errors**: Throw typed errors or use Result type; never return `null` silently.
- **Logging**: App at `info`, infra at `debug`; strip PII at source.
- **I18n**: Keys are kebab-case; do not hardcode strings in components.
- **Accessibility**: Provide labels, roles, and keyboard support by default.

## Components & APIs
### ExampleComponent
**Purpose**: Present semantic search results.
**Props**:
```ts
type ExampleProps = { query: string; onSelect(id: string): void }
```
**Usage**:
```tsx
<ExampleComponent query="mask" onSelect={id => console.log(id)} />
```
**Edge Cases**: Empty results, loading states, network failures.

## Data Contracts
### Product (v1.0)
```ts
type Product = {
  id: string
  name: string
  price: number
  currency: 'USD' | 'EUR' | 'ILS'
  tags?: string[]
}
```
**Validation**: Zod schemas; reject unknown fields.

## Environments & Secrets
- **Envs**: dev, stage, prod. Feature flags via `NEXT_PUBLIC_*` where safe.
- **Secrets**: Never commit; use platform secret managers; rotate quarterly.

## Workflows
### Local Dev
```bash
pnpm i
pnpm dev
```
### CI/CD
- PR checks: typecheck, lint, unit tests, build Storybook.
- Preview deployments per PR; require 1 review before merge.

## Testing & QA
- **Targets**: 80% line coverage; e2e for critical flows.
- **Tools**: Vitest, Playwright, MSW for API mocks.
- **Checklist**: a11y pass, i18n keys present, error boundaries tested.

## Glossary
- **Handbook**: This memory + mirrored docs.
- **Contract**: A typed interface between services or components.

## Decisions Changelog
- **2025-08-31** Adopt Tailwind v4 — improves DX and consistency. Owner: Team FE.
- **2025-08-31** Mirror Cursor rules to Storybook MDX. Owner: Platform.
# Project Memory & Dev Handbook

This file is the **source of truth** for project knowledge, conventions, and decisions used by the AI (Cursor rules).

> Storybook docs are **generated/mirrored** from this file into `storybook/learned-memories/*.mdx` using the provided sync script.

## How This Works
- **Authoritative memory for AI**: `.cursor/rules/learned-memories.mdc`
- **Mirrored handbook for developers**: `storybook/learned-memories/*.mdx`
- **Sync rule**: Every change here **must** be mirrored by running the sync script.

## Sync Commands (local)
```bash
# writes MDX docs into ./storybook/learned-memories
node scripts/sync-mdc-to-mdx.js .cursor/rules/learned-memories.mdc storybook/learned-memories
```

---

## User Preferences
- Keep answers concise by default; include code **diffs** unless full files are requested.
- Prefer **Next.js** for client + server work.
- Use **Tailwind v4** for styling; follow v4 utilities and patterns.
- When summarizing, lead with TL;DR, then details if needed.

## Technical Decisions
- **CSS Framework**: Tailwind v4. **Why**: JIT + design tokens, developer velocity. **Date**: 2025-08-31. **Impact**: Avoid v3-only plugins.
- **Design Docs**: Treat this handbook as Storybook-like docs; mirror via MDX. **Date**: 2025-08-31.
- **Data Viz**: Use Recharts for React charts; follow accessibility notes. **Date**: 2025-08-31.

## Project Conventions
- **Commits**: Conventional Commits (`feat:`, `fix:`, `chore:`). Scope = package/folder.
- **Errors**: Throw typed errors or use Result type; never return `null` silently.
- **Logging**: App at `info`, infra at `debug`; strip PII at source.
- **I18n**: Keys are kebab-case; do not hardcode strings in components.
- **Accessibility**: Provide labels, roles, and keyboard support by default.

## Components & APIs
### ExampleComponent
**Purpose**: Present semantic search results.
**Props**:
```ts
type ExampleProps = { query: string; onSelect(id: string): void }
```
**Usage**:
```tsx
<ExampleComponent query="mask" onSelect={id => console.log(id)} />
```
**Edge Cases**: Empty results, loading states, network failures.

## Data Contracts
### Product (v1.0)
```ts
type Product = {
  id: string
  name: string
  price: number
  currency: 'USD' | 'EUR' | 'ILS'
  tags?: string[]
}
```
**Validation**: Zod schemas; reject unknown fields.

## Environments & Secrets
- **Envs**: dev, stage, prod. Feature flags via `NEXT_PUBLIC_*` where safe.
- **Secrets**: Never commit; use platform secret managers; rotate quarterly.

## Workflows
### Local Dev
```bash
pnpm i
pnpm dev
```
### CI/CD
- PR checks: typecheck, lint, unit tests, build Storybook.
- Preview deployments per PR; require 1 review before merge.

## Testing & QA
- **Targets**: 80% line coverage; e2e for critical flows.
- **Tools**: Vitest, Playwright, MSW for API mocks.
- **Checklist**: a11y pass, i18n keys present, error boundaries tested.

## Glossary
- **Handbook**: This memory + mirrored docs.
- **Contract**: A typed interface between services or components.

## Decisions Changelog
- **2025-08-31** Adopt Tailwind v4 — improves DX and consistency. Owner: Team FE.
- **2025-08-31** Mirror Cursor rules to Storybook MDX. Owner: Platform.
