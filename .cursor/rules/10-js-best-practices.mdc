---
description: These guidelines apply primarily to JavaScript files in this project (`main.js` and any scripts under `src/`).  They are organised by category to clarify when and how to apply them.
alwaysApply: false
---

## Always apply

- **Use modern syntax:** Prefer `const` and `let` over `var`.  Use
  arrow functions and destructuring when they improve clarity.
- **Encapsulation:** Wrap your code in an immediately invoked
  function expression (IIFE) or ES module to avoid polluting the
  global namespace.
- **Small functions:** Break your logic into small, named functions
  that do one thing.  This makes it easier for Cursor to reason
  about the code and for you to refactor later.
- **Feature detection:** Check for the presence of APIs before using
  them (e.g. `if (window.mraid) …`).

## Apply intelligently

- **Pure functions:** Where possible, write pure functions (no side
  effects) so they can be unit tested or reused by Cursor.  When
  side effects are necessary (e.g. DOM manipulation), isolate them.
- **Debugging:** Implement a small `debug()` utility that logs
  messages only when a flag is enabled.  Disable debug output in
  production builds.
- **Throttling:** For repeated events (e.g. tapping), throttle or
  debounce handlers to avoid performance issues.
- **Use `requestAnimationFrame`:** Drive animations and progress
  updates with `requestAnimationFrame` or the engine's ticker rather
  than `setInterval`.

## Apply to specific files

- **`main.js`:** Centralise event listeners here.  Avoid attaching
  listeners inside render loops.  Use `requestAnimationFrame` to
  update the progress bar or game state.  Keep engine setup in
  dedicated helper functions (e.g. `setupPixi()` or
  `setupPhaser()`).
- **Files in `src/`:** If you create engine‑specific files under
  `src/pixi` or `src/phaser`, follow the respective rule files
  (`40-pixi.mdc` or `41-phaser.mdc`) and export functions rather than
  creating side effects on import.

## Apply manually

- **Refactoring:** When the game grows, refactor common code into
  modules under `src/` (e.g. `input.js`, `game-loop.js`) and update
  the rules accordingly.
- **Third‑party code:** Before adding a library, consider whether the
  functionality can be implemented with native APIs or a lighter
  dependency.  If you must include a library, document why and
  ensure it does not bloat the final bundle.# JavaScript Best Practices

These guidelines apply primarily to JavaScript files in this project
(`main.js` and any scripts under `src/`).  They are organised by
category to clarify when and how to apply them.

## Always apply

- **Use modern syntax:** Prefer `const` and `let` over `var`.  Use
  arrow functions and destructuring when they improve clarity.
- **Encapsulation:** Wrap your code in an immediately invoked
  function expression (IIFE) or ES module to avoid polluting the
  global namespace.
- **Small functions:** Break your logic into small, named functions
  that do one thing.  This makes it easier for Cursor to reason
  about the code and for you to refactor later.
- **Feature detection:** Check for the presence of APIs before using
  them (e.g. `if (window.mraid) …`).

## Apply intelligently

- **Pure functions:** Where possible, write pure functions (no side
  effects) so they can be unit tested or reused by Cursor.  When
  side effects are necessary (e.g. DOM manipulation), isolate them.
- **Debugging:** Implement a small `debug()` utility that logs
  messages only when a flag is enabled.  Disable debug output in
  production builds.
- **Throttling:** For repeated events (e.g. tapping), throttle or
  debounce handlers to avoid performance issues.
- **Use `requestAnimationFrame`:** Drive animations and progress
  updates with `requestAnimationFrame` or the engine's ticker rather
  than `setInterval`.

## Apply to specific files

- **`main.js`:** Centralise event listeners here.  Avoid attaching
  listeners inside render loops.  Use `requestAnimationFrame` to
  update the progress bar or game state.  Keep engine setup in
  dedicated helper functions (e.g. `setupPixi()` or
  `setupPhaser()`).
- **Files in `src/`:** If you create engine‑specific files under
  `src/pixi` or `src/phaser`, follow the respective rule files
  (`40-pixi.mdc` or `41-phaser.mdc`) and export functions rather than
  creating side effects on import.

## Apply manually

- **Refactoring:** When the game grows, refactor common code into
  modules under `src/` (e.g. `input.js`, `game-loop.js`) and update
  the rules accordingly.
- **Third‑party code:** Before adding a library, consider whether the
  functionality can be implemented with native APIs or a lighter
  dependency.  If you must include a library, document why and
  ensure it does not bloat the final bundle.